Map.centerObject(roi) //YOUtube.com/@geemap

var roi = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[113.69001648196563, -1.8770593752211775],
          [113.69001648196563, -2.401289120996008],
          [114.19676086673125, -2.401289120996008],
          [114.19676086673125, -1.8770593752211775]]], null, false),
    l4 = ee.ImageCollection("LANDSAT/LT04/C02/T1_L2"),
    l7 = ee.ImageCollection("LANDSAT/LE07/C02/T1_L2"),
    l9 = ee.ImageCollection("LANDSAT/LC09/C02/T1_L2"),
    l8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2"),
    l5 = ee.ImageCollection("LANDSAT/LT05/C02/T1_L2");
// Year list to map
var yearList = [1990, 2005, 2020];

// Function to filter
function filterCol(col, roi, date){
  return col.filterDate(date[0], date[1]).filterBounds(roi);
}

// Composite function 
function landsat457(roi, date){
  var col = filterCol(l4, roi, date).merge(filterCol(l5, roi, date));
  var image =/*YOUTUBE.com/@geemap*/ col.map(cloudMaskTm).median().clip(roi);
  return image;
}

function landsat89(roi, date){
  var col = filterCol(l8, roi, date).merge(filterCol(l9, roi, date));
  var image = col.map(cloudMaskOli).median().clip(roi);
  return image;
}

// Cloud mask
function cloudMaskTm(image){
  var qa = image.select('QA_PIXEL');
  var dilated = 1 << 1;
  var cloud = 1 << 3;
  var shadow = 1 << 4;
  var mask = qa.bitwiseAnd(dilated).eq(0)
    .and(qa.bitwiseAnd(cloud).eq(0))
    .and(qa.bitwiseAnd(shadow).eq(0));
  
  return image.select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7'], ['B2', 'B3', 'B4', 'B5', 'B6', 'B7'])
    .updateMask(mask)
    .multiply(0.0000275)
    .add(-0.2);
}

function cloudMaskOli(image){
  var qa = image.select('QA_PIXEL');
  var dilated = 1 << 1;
  var cirrus = 1 << 2;
  var cloud = 1 << 3;
  var shadow = 1 << 4;
  var mask = qa.bitwiseAnd(dilated).eq(0)
    .and(qa.bitwiseAnd(cirrus).eq(0))
    .and(qa.bitwiseAnd(cloud).eq(0))
    .and(qa.bitwiseAnd(shadow).eq(0));
  
  return image.select(['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'], ['B2', 'B3', 'B4', 'B5', 'B6', 'B7'])
    .updateMask(mask)
    .multiply(0.0000275).add(-0.2);
}

// Generate image per year
var forestCol = ee.ImageCollection(yearList.map(function(year){
  var start = ee.Date.fromYMD(year - 1, 1, 1);
  var end = ee.Date.fromYMD(year + 1, 12, 31);
  var date = [start, end];
  
  // Conditional on landsat collection to use
  var landsat;
  if (year < 2014) {
    landsat = landsat457;
  } else {
    landsat = landsat89;
  }
  
  // Create an image composite
  var image = landsat(roi, date);

  // Show the image
  Map.addLayer(image, { min: [0.1, 0.05, 0], max: [0.4, 0.3, 0.15], bands: ['B5', 'B6', 'B2'] }, 'SR_' + year, false);
  
  // Bandmap
  var bandMap = { NIR: image.select('B5'), SWIR: image.select('B7') };
  
  // VI
  var vi = image.expression('(NIR - SWIR) / (NIR + SWIR)', bandMap).rename('VI');
  Map.addLayer(vi, { min: -1, max: 1, palette: ['blue', 'white', 'green']}, 'VI_' + year, false);
  
  // Forest
  var forest = vi.gt(0.7).selfMask().rename('forest');
  Map.addLayer(forest, { palette: 'green' }, 'Forest_' + year, false);
  
  return forest.toByte().set('year', year, 'system:time_start', date);
}));

// Make deforestation risk map
// Forest list
var forest2020 = forestCol.filter(ee.Filter.eq('year', 2020)).first();
var forest2005 = forestCol.filter(ee.Filter.eq('year', 2005)).first();
var forest1990 = forestCol.filter(ee.Filter.eq('year', 1990)).first();

// Deforestation
var deforest1990_2005 = forest1990.eq(1).and(forest2005.unmask(0).eq(0)).selfMask();
Map.addLayer(deforest1990_2005, { palette: 'red' }, 'Deforestation 1990 - 2005', false);

var deforest2005_2020 = forest2005.eq(1).and(forest2020.unmask(0).eq(0)).selfMask();
Map.addLayer(deforest2005_2020, { palette: 'orange' }, 'Deforestation 2005 - 2020', false);

// Forest area 2020 & 1990
var forestArea2020 = ee.Number(forest2020.multiply(ee.Image.pixelArea().divide(10000)).reduceRegion({
  scale: 30,
  reducer: ee.Reducer.sum(),
  geometry: roi,
  bestEffort: true
}).get('forest'));
print('Forest area 2020 (Ha)', forestArea2020);

var forestArea1990 = ee.Number(forest1990.multiply(ee.Image.pixelArea().divide(10000)).reduceRegion({
  scale: 30,
  reducer: ee.Reducer.sum(),
  geometry: roi,
  bestEffort: true
}).get('forest'));
print('Forest area 1990 (Ha)', forestArea1990);

// Deforestation rate
// FAO q=((A2/A1) ^ 1/(t2−t1)) − 1
var deforestationRate = ee.Number.expression('((A2 / A1) ** (1 / (T2 - T1))) - 1', {
  A2: forestArea2020,
  A1: forestArea1990,
  T2: 2020,
  T1: 1990
});
print('Deforestation rate 1990 - 2020', deforestationRate);

// Create a raster where  deforestation in 1990 - 2005 is 1, 2005 - 2020 is 2, and 2020 forest is 3
var forestRaster = ee.Image(0).where(deforest1990_2005.eq(1), 1)
  .where(deforest2005_2020.eq(1), 2)
  .where(forest2020.eq(1), 3)
  .selfMask()
  .clip(roi);
Map.addLayer(forestRaster, { min: 1, max: 3, palette: ['red', 'yellow', 'green']}, 'Forest Raster', false);

// Create kernel with 9x9 array for convolve
var array = ee.List.repeat(ee.List.repeat(deforestationRate, 9), 9);
var kernel = ee.Kernel.fixed(9, 9, array);

// Risk palette
var palette = ['green', 'yellow', 'red', 'purple'];

// Create continuous risk map
var riskMap = forestRaster.convolve(kernel)
  .updateMask(forest2020)
  .reproject('EPSG:4326', null, 30)
  .abs()
  .multiply(-1)
  .rename('risk');

// Find min and max of the risk map
var minMax = riskMap.reduceRegion({
  geometry: roi,
  scale: 30,
  reducer: ee.Reducer.percentile([0.1, 99.9]),
  bestEffort: true
});
print(minMax);
var min = ee.Number(minMax.get('risk_p0'));
var max = ee.Number(minMax.get('risk_p100'));

// Create classes risk map into 0 - 30 with equal interval
var riskMapEqualInterval = riskMap.clamp(min, max).unitScale(min, max).multiply(30).toByte();
Map.addLayer(riskMapEqualInterval, { min: 0, max: 30, palette: palette}, 'Risk Equal Interval');

// Legend
Map.add(legendGradient('Risk Class', { min: 0, max: 30, palette: palette }, 'bottom-left'));

// Function to create gradient legend
function legendGradient(title, visual, position) {
  // set position of panel
  var legend = ui.Panel({
    layout: ui.Panel.Layout.flow('vertical', true),
    style: {
      position: position,
      stretch: 'horizontal',
      maxWidth: '100px',
    }
  });
   
  // Create legend title
  var legendTitle = ui.Label({
    value: title,
    style: {
    fontWeight: 'bold',
    fontSize: '15px',
    textAlign: 'center',
    stretch: 'horizontal'
    }
  });
   
  // Add the title to the panel
  legend.add(legendTitle);
   
  // create the legend image
  var lon = ee.Image.pixelLonLat().select('latitude');
  var gradient = lon.multiply((visual.max-visual.min)/100.0).add(visual.min);
  var legendImage = gradient.visualize(visual);
   
  // create text on top of legend
  var max = ui.Label({
    value: visual.max,
    style: {textAlign: 'center', stretch: 'horizontal'}
  });
  legend.add(max);
   
  // create thumbnail from the image
  var thumbnail = ui.Thumbnail({
    image: legendImage,
    params: {bbox:'0,0,10,100', dimensions:'10x50'},
    style: {textAlign: 'center', stretch: 'horizontal', height: '150px'}
  });
   
  // add the thumbnail to the legend
  legend.add(thumbnail);
   
  // create text on bottom of legend
  var min = ui.Label({
    value: visual.min,
    style: {textAlign: 'center', stretch: 'horizontal'}
  });
  legend.add(min);
   
  return legend;
}
