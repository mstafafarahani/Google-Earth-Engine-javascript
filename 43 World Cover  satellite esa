//vedio & code in my channel YouTube.com/@Geemap     mstafa.farahani@gmail.com
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Point([21.153260339714915, 43.949265461170384]);
/*YOu CAN USE city boundary  ,
var city = ee.FeatureCollection("WM/geoLab/geoBoundaries/600/ADM2").filterBounds(geometry)
Map.addLayer(city)
Map.centerObject(geometry,8)

YOu CAN USE province boundary 
var provinceORstate = ee.FeatureCollection("FAO/GAUL_SIMPLIFIED_500m/2015/level1").filterBounds(geometry) //boundary province/state
Map.addLayer(province)
*/

//YOu CAN USE coountry boundary 
var country = ee.FeatureCollection("FAO/GAUL/2015/level0").filterBounds(geometry);
Map.addLayer(country); // Add the coountry boundary to the map
Map.centerObject(geometry,3)




var worldcover = ee.ImageCollection('ESA/WorldCover/v200')
var filtered = worldcover.filter(ee.Filter.date('2020-01-01','2021-01-01'))
var classification = ee.Image(filtered.first())
print(classification)
var classNames = classification.get('Map_class_names')
var classValues = classification.get('Map_class_values')
print(classNames)
print(classValues)
var classValues = ee.List(classValues).map(function(item){
  return ee.Number(item).format()
})
var classDict = ee.Dictionary.fromLists(classValues,classNames)
print(classDict)
var clipped = classification.clip(country)
Map.addLayer(clipped,{},'Landcover class')
//method eq
var water = clipped.eq(80)
Map.addLayer(water.selfMask(),{min:0,max:1,palette:['white','blue']},'Water')
//method eq
var Cropland = clipped.eq(40)
Map.addLayer(Cropland.selfMask(),{min:0,max:1,palette:['white','f096ff']},'Cropland')
//method Area
var areahectar = ee.Image.pixelArea().divide(1e6)
var areaImage = areahectar.addBands(clipped)
print(areaImage)
//method Grouped Reducer
var areas = areaImage.reduceRegion({
      reducer: ee.Reducer.sum().group({
      groupField: 1,
      groupName: 'class',
    }),
    geometry: country,
    scale: 10,                        
    maxPixels: 1e10
    })

var classAreas = ee.List(areas.get('groups'))
// Process results to extract the areas and
// create a FeatureCollection
var classAreaList = classAreas.map(function(item) {
  var areaDict = ee.Dictionary(item)
  var classNumber = ee.Number(areaDict.get('class')).format()
  var area = ee.Number(areaDict.get('sum')).round()
  return ee.List([classDict.get(classNumber),area])
})
var result = ee.Dictionary(classAreaList.flatten())
print(result)

//pie chart
//pie chart

var classAreaList = classAreas.map(function(item) {
  var areaDict = ee.Dictionary(item);
  var classNumber = ee.Number(areaDict.get('class')).format();
  var area = ee.Number(areaDict.get('sum')).round();
  return ee.Feature(null, {
    className: classDict.get(classNumber),
    area: area                          
  });
});

// FeatureCollection
var chartData = ee.FeatureCollection(classAreaList);


var pieChart = ui.Chart.feature.byFeature(chartData, 'className', 'area')
  .setChartType('PieChart')
  .setOptions({
    title: 'land cover',
    legend: {position: 'right'},
    sliceVisibilityThreshold: 0.02,
    colors: ['006400','ffbb22','ffff4c','f096ff','fa0000','#b4b4b4','f0f0f0','0064c8','0096a0','00cf75','fae6a0']
  })
print(pieChart)
var palette = ['#006400','ffbb22','ffff4c','f096ff','fa0000','b4b4b4','f0f0f0','0064c8','0096a0','00cf75','fae6a0' ];
var labels = ['Tree cover', 'Shrubland', 'Grassland', 'Cropland', 'Built-up', 'Bare / sparse vegetation', 'Snow and ice', 'Permanent water bodies', 'Herbaceous wetland', 'Mangroves','Moss and lichen'];
//--
var legend = ui.Panel({
  style: {
    position: 'bottom-right',
    padding: '8px 15px'
  }
});

// Title for the legend
var legendTitle = ui.Label({
  value: 'Legend Title',
  style: {
    fontWeight: 'bold',
    fontSize: '16px',
    margin: '0 0 10px 0',
    padding: '0'
  }
});
legend.add(legendTitle);

// Function to create a legend item
var makeLegendItem = function(color, name) {
  var colorBox = ui.Label({
    style: {
      backgroundColor: color,
      padding: '8px',
      margin: '0 0 4px 0'
    }
  });

  var description = ui.Label({
    value: name,
    style: {
      margin: '0 0 4px 6px'
    }
  })
  return ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')
  })
}
// Add each color and label to the legend
for (var i = 0; i < palette.length; i++) {
  legend.add(makeLegendItem(palette[i], labels[i]));
}
// Add the legend to the map
Map.add(legend);
