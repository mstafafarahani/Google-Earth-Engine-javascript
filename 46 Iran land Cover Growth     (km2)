//vedio & code in my channel YouTube.com/@Geemap     mstafa.farahani@gmail.com
var geometry = 
    /* color: #00ffff */
    /* shown: false */
    ee.Geometry.Point([53.44636939198821, 32.36347329011057]);
    
/*YOu CAN USE city boundary  ,
var city = ee.FeatureCollection("WM/geoLab/geoBoundaries/600/ADM2").filterBounds(geometry)
Map.addLayer(city)
Map.centerObject(geometry,8)

YOu CAN USE province boundary 
var provinceORstate = ee.FeatureCollection("FAO/GAUL_SIMPLIFIED_500m/2015/level1").filterBounds(geometry) //boundary province/state
Map.addLayer(province)

var country = ee.FeatureCollection("FAO/GAUL/2015/level0").filterBounds(geometry);
Map.addLayer(province); // Add the country boundary to the map
*/

var province = ee.FeatureCollection("FAO/GAUL_SIMPLIFIED_500m/2015/level1").filterBounds(geometry) //boundary province/state
Map.addLayer(province)

//YOu CAN USE country boundary 

Map.centerObject(geometry,3)

var classification = ee.Image("KNTU/LiDARLab/IranLandCover/V1").select('classification')
print(classification)


var classNames = classification.get('classification_class_names') 
var classValues = classification.get('classification_class_values') 
print(classNames)
print(classValues)

var classValues = ee.List(classValues).map(function(item){
  return ee.Number(item).format()
})
var classDict = ee.Dictionary.fromLists(classValues,classNames)
print(classDict)


var clipped = classification.clip(province)
Map.addLayer(clipped,{},'LandCover for Iran - 2024')
//method eq
var water = clipped.eq(2)
Map.addLayer(water.selfMask(),{min:0,max:1,palette:['white','blue']},'masked')

//method Area
var areahectar = ee.Image.pixelArea().divide(1e6)
var areaImage = areahectar.addBands(clipped)
print(areaImage)
//method Grouped Reducer
var areas = areaImage.reduceRegion({
      reducer: ee.Reducer.sum().group({
      groupField: 1,
      groupName: 'class',
    }),
    geometry: province,
    scale: 13,
    maxPixels: 1e10
    })

var classAreas = ee.List(areas.get('groups'))
// Process results to extract the areas and
// create a FeatureCollection
var classAreaList = classAreas.map(function(item) {
  var areaDict = ee.Dictionary(item)
  var classNumber = ee.Number(areaDict.get('class')).format()
  var area = ee.Number(areaDict.get('sum')).round()
  return ee.List([classDict.get(classNumber),area])
})
var result = ee.Dictionary(classAreaList.flatten())
print(result)

//pie chart

var classAreaList = classAreas.map(function(item) {
  var areaDict = ee.Dictionary(item);
  var classNumber = ee.Number(areaDict.get('class')).format();
  var area = ee.Number(areaDict.get('sum')).round();
  return ee.Feature(null, {
    className: classDict.get(classNumber),
    area: area                          
  });
});

// FeatureCollection
var chartData = ee.FeatureCollection(classAreaList);


var pieChart = ui.Chart.feature.byFeature(chartData, 'className', 'area')
  .setChartType('PieChart')
  .setOptions({
    title: 'Land cover IRAN area km2',
    legend: {position: 'right'},
    sliceVisibilityThreshold: 0.02,
    colors: ['000000','006eff','41a661','ff7f7f','bee8ff','ff00c5','ff0000','00734c','732600','ffaa00','d3ffbe','446589','cccccc']
  })

print(pieChart);
// Define the palette and labels
var palette = ['000000','006eff','41a661','ff7f7f','bee8ff','ff00c5','ff0000','00734c','732600','ffaa00','d3ffbe','446589','cccccc']
var labels = ['Urban','Water','Wetland','Kalut (yardang)','Marshland','Salty Land','Clay','Forest','SaLo','Outcrop','Uncovered Plain','Sand','Farm Land','Range Land']
// Create the legend
var legend = ui.Panel({
  style: {
    position: 'bottom-right',
    padding: '8px 15px'
  }
});

// Title for the legend
var legendTitle = ui.Label({
  value: 'LandCover for Iran area - 2024',
  style: {
    fontWeight: 'bold',
    fontSize: '19px',
    margin: '0 0 10px 0',
    padding: '0'
  }
});
legend.add(legendTitle);

// Function to create a legend item
var makeLegendItem = function(color, name) {
  var colorBox = ui.Label({
    style: {
      backgroundColor: color,
      padding: '8px',
      margin: '0 0 4px 0'
    }
  });

  var description = ui.Label({
    value: name,
    style: {
      margin: '0 0 4px 6px'
    }
  });

  return ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')
  });
};

// Add each color and label to the legend
for (var i = 0; i < palette.length; i++) {
  legend.add(makeLegendItem(palette[i], labels[i]));
}

// Add the legend to the map
Map.add(legend);
