//vedio & code in my channel YouTube.com/@Geemap     mstafa.farahani@gmail.com  Happy coding! ðŸš€
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Point([-55.91800629282029, 4.471738517727158]);
/*YOu CAN USE city boundary and run this code only for your  city ,
var city = ee.FeatureCollection("WM/geoLab/geoBoundaries/600/ADM2").filterBounds(geometry)
Map.addLayer(city)
Map.centerObject(geometry,8)



YOu CAN USE province boundary and run this code only for your  province
var provinceORstate = ee.FeatureCollection("FAO/GAUL_SIMPLIFIED_500m/2015/level1").filterBounds(geometry) //boundary province/state
Map.addLayer(province)
*/



//YOu CAN USE country boundary and run this code only for your  country
var country = ee.FeatureCollection("FAO/GAUL/2015/level0").filterBounds(geometry);
Map.addLayer(country); // Add the country boundary to the map
Map.centerObject(geometry,3)



function soil(id, band, name){
  var image = ee.Image(id).select(band)
  Map.addLayer(image.clip(country),[],name,false)
  print(ui.Chart.image.histogram(image, country, 927.67 ))
  var stat = image.reduceRegion({reducer: ee.Reducer.mean().combine({reducer2: ee.Reducer.minMax(), sharedInputs: true}),
  geometry: country, scale: 927.67 });
  print('statistical information for '+name,stat)
  
  
  
  
  Export.image.toDrive({
  image: image.clip(country),
  description: name,
  scale: 927.67 ,
  region: country,
  crs: image.getInfo().crs,
  folder: 'test'
  })
  return image
  }
  
var Carbon  = soil("NASA/JPL/global_forest_canopy_height_2005", '1', 'Forest Canopy Height')




var dataset = ee.Image("NASA/JPL/global_forest_canopy_height_2005").select('1').clip(country)
print((ui.Chart.image.series(dataset,country,ee.Reducer.mean(),927.67 ,'system:time_start')).setOptions({title:'Forest Canopy Height',interpolateNulls:true,lineWidth:1,pointSize:2,curveType:'function',vAxis:{title: ('meter')}}))



var vis = {bands: ['1'],min:4,max:36,palette: [ 'fcd163', '99b718', '66a000', '3e8601', '207401', '056201','004c00', '011301']}
Map.addLayer(dataset,vis,'Forest Canopy Height',false)



















// Define the palette and labels
var palette = ['fcd163', '66a000', '207401', '056201', '011301' ]
var labels = ['Minimal:0.8 meter','Moderate','Satisfactory','Optimal','Maximal:39.2  meter']
// Create the legend
var legend = ui.Panel({
  style: {
    position: 'bottom-right',
    padding: '8px 15px'
  }
});

// Title for the legend
var legendTitle = ui.Label({
  value: 'Forest Canopy Height - meter - 2024',
  style: {
    fontWeight: 'bold',
    fontSize: '19px',
    margin: '0 0 10px 0',
    padding: '0'
  }
});
legend.add(legendTitle);

// Function to create a legend item
var makeLegendItem = function(color, name) {
  var colorBox = ui.Label({
    style: {
      backgroundColor: color,
      padding: '8px',
      margin: '0 0 4px 0'
    }
  });

  var description = ui.Label({
    value: name,
    style: {
      margin: '0 0 4px 6px'
    }
  });

  return ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')
  });
};

// Add each color and label to the legend
for (var i = 0; i < palette.length; i++) {
  legend.add(makeLegendItem(palette[i], labels[i]));
}

// Add the legend to the map
Map.add(legend);
